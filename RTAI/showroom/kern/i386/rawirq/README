This is an example to show how to access interrupts directly in a self
contained mode, i.e usable without anything and just installed on a ADEOSised
kernel.

Clearly if you need to communicate with user space you must either install
something else, e.g.:
- just rtai_hal to use srqs, see /showroom/kern/sysreq
- rtai_hal and rtai_fifos, many RTAI kernel space examples show what to do
- rtai_hal, the lxrt scheduler (the latter will do nothing but is needed for
  some entries), rtai_shm, scb, see /showroom/kern/i386/scb.
or ...
- do it your own way with raw Linux and ADEOS.

What attached is a draft that uses the timer interrupt to proof it works.
You'll likely have to modify it for an adaption to your own needs.
Note that vector does not mean irq number. On a normal non APIC machine you'll
have to add 32 (at least I recall so). On a machine with APIC/SMP look at
the startup messages. See comments in the code.

Notice also that it requires the rtai_hal module to be installed, but just
to pend the timer interrupt to keep Linux happy. If you are going to use it
on its own there should not be such a problem. It is also likely that some
Linux and Adeos specific headers are required if you want to get rid of
rtai.h also.

Since we like to demonstrate that hard FPU support can be used in irq
handlers, there is a stand alone support for it also.

Paolo Mantegazza.
